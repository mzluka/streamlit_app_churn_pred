import sklearn

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from lightgbm import LGBMClassifier

import streamlit as st
import pickle
import numpy as np

import base64
@st.cache(allow_output_mutation=True)
def get_base64_of_bin_file(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

def set_png_as_page_bg(png_file):
    bin_str = get_base64_of_bin_file(png_file)
    page_bg_img = '''
    <style>
    body {
    background-image: url("data:image/png;base64,%s");
    background-size: cover;
    }
    </style>
    ''' % bin_str

    st.markdown(page_bg_img, unsafe_allow_html=True)
    return
set_png_as_page_bg('5.jpg')


classifier_name=['LightGMBClassifier', 'RandomForestClassifier', 'LogisticRegressionClassifier']
option = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è', classifier_name)
st.subheader(option)



#Importing model and label encoders
model=pickle.load(open("final_xg_model.pkl","rb"))
#model_1 = pickle.load(open("final_rf_model.pkl","rb"))
le_pik=pickle.load(open("label_encoding_for_gender.pkl","rb"))
le1_pik=pickle.load(open("label_encoding_for_geo.pkl","rb"))

def predict_churn(CreditScore, Geo, Gen, Age, Tenure, Balance, NumOfProducts, HasCrCard, IsActiveMember, EstimatedSalary):
    input = np.array([[CreditScore, Geo, Gen, Age, Tenure, Balance, NumOfProducts, HasCrCard, IsActiveMember, EstimatedSalary]]).astype(np.float64)
    if option == 'RandomForest':
        prediction = model.predict_proba(input)
        pred = '{0:.{1}f}'.format(prediction[0][0], 2)

    else:
        pred=0.30
        #st.markdown('–ö–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –±–∞–Ω–∫–µ')

    return float(pred)


def main():
    st.title("–ü—Ä–æ–≥–Ω–æ–∑ –æ—Ç—Ç–æ–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –±–∞–Ω–∫–∞")
    html_temp = """
    <div style="background-color:#f3f6f4 ;padding:10px">
    <h2 style="color:red;text-align:center;">–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–ª–∏–µ–Ω—Ç—É:</h2>
    </div>
    """
    st.markdown(html_temp, unsafe_allow_html=True)


    st.sidebar.subheader("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ IT-Academy –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é Data Science")
    st.sidebar.image('4.jpg')
    st.sidebar.text("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –°–ª—É–∫–∞ –ú.–ó., –¶–ë–£ 602 –≥. –õ–∏–¥–∞")
    st.markdown(
    """
<style>
.sidebar .sidebar-content {
    background-image: linear-gradient(#8993ab,#8993ab);
    color: black;
}
</style>
""",
    unsafe_allow_html=True,
)

  
    CreditScore = st.number_input('–°–∫–æ—Ä–∏–Ω–≥–æ–≤—ã–π –±–∞–ª–ª', min_value=1, max_value=400, format="%d")

    Geography = st.selectbox('–†–µ–≥–∏–æ–Ω', ['France', 'Germany', 'Spain'])
    Geo = int(le1_pik.transform([Geography]))
     
  
    Age = st.number_input('–í–æ–∑—Ä–∞—Å—Ç', min_value=18, max_value=92, format="%d")

    Tenure = st.number_input('–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –≤ –±–∞–Ω–∫–µ, –ª–µ—Ç', min_value=1, max_value=10, format="%d")

    Balance = st.number_input('–ë–∞–ª–∞–Ω—Å —Å—á—ë—Ç–∞',  max_value=25000.00, format="%4.2f")

    NumOfProducts = st.number_input('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤', min_value=1, max_value=4, format="%d")

    HasCrCard = st.selectbox('–ù–∞–ª–∏—á–∏–µ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏', ['0', '1'])
    
    if HasCrCard == '–ù–µ—Ç':
        HasCrCard = 0
    else:
        HasCrCard = 1
    
    IsActive = st.selectbox("–ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç ?", ['–ù–µ—Ç', '–î–∞'])
    
    if IsActive == '–ù–µ—Ç':
        IsActiveMember = 0
    else:
        IsActiveMember = 1

    IsActiveMember = st.selectbox('–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', ['0', '1'])

    EstimatedSalary = st.number_input('–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞',  max_value=25000.00, format="%4.2f")

                
    churn_html = """  
              <div style="background-color:#f44336;padding:20px >
               <h2 style="color:red;text-align:center;">üëé –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã —Ç–µ—Ä—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞...</h2>
               </div>
            """
    no_churn_html = """  
              <div style="background-color:#94be8d;padding:20px >
               <h2 style="color:green ;text-align:center;">üëå –£—Å–ø–µ—Ö, –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –±–∞–Ω–∫–µ!</h2>
               </div>
            """

    if st.button('–°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑'):
        output = predict_churn(CreditScore, Geo, Gen, Age, Tenure, Balance, NumOfProducts, HasCrCard, IsActiveMember, EstimatedSalary)
        st.success('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Ç—Ç–æ–∫–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {}'.format(output))
        

        if output >= 0.5:
            st.markdown(churn_html, unsafe_allow_html= True)

        else:
            st.markdown(no_churn_html, unsafe_allow_html= True)
            
            
        
if __name__=='__main__':
    main()
